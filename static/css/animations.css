/* 
 * Economy Bot Animations CSS
 * This file contains animations for the Discord Economy Bot
 */

/* Basic fade in animation */
@keyframes fadeIn {
    from {
        opacity: 0;
    }
    to {
        opacity: 1;
    }
}

/* Fade in from bottom animation */
@keyframes fadeInUp {
    from {
        opacity: 0;
        transform: translateY(20px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

/* Fade in from top animation */
@keyframes fadeInDown {
    from {
        opacity: 0;
        transform: translateY(-20px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

/* Fade in from left animation */
@keyframes fadeInLeft {
    from {
        opacity: 0;
        transform: translateX(-20px);
    }
    to {
        opacity: 1;
        transform: translateX(0);
    }
}

/* Fade in from right animation */
@keyframes fadeInRight {
    from {
        opacity: 0;
        transform: translateX(20px);
    }
    to {
        opacity: 1;
        transform: translateX(0);
    }
}

/* Scale in animation */
@keyframes scaleIn {
    from {
        opacity: 0;
        transform: scale(0.8);
    }
    to {
        opacity: 1;
        transform: scale(1);
    }
}

/* Coin flip animation */
@keyframes coinFlip {
    0% {
        transform: rotateY(0deg);
    }
    50% {
        transform: rotateY(180deg);
    }
    100% {
        transform: rotateY(360deg);
    }
}

/* Pulse animation */
@keyframes pulse {
    0% {
        transform: scale(1);
    }
    50% {
        transform: scale(1.1);
    }
    100% {
        transform: scale(1);
    }
}

/* Glow animation */
@keyframes glow {
    0% {
        box-shadow: 0 0 0 0 rgba(255, 193, 7, 0.5);
    }
    70% {
        box-shadow: 0 0 0 15px rgba(255, 193, 7, 0);
    }
    100% {
        box-shadow: 0 0 0 0 rgba(255, 193, 7, 0);
    }
}

/* Shake animation */
@keyframes shake {
    0%, 100% {
        transform: translateX(0);
    }
    10%, 30%, 50%, 70%, 90% {
        transform: translateX(-4px);
    }
    20%, 40%, 60%, 80% {
        transform: translateX(4px);
    }
}

/* Rotate animation */
@keyframes rotate {
    from {
        transform: rotate(0deg);
    }
    to {
        transform: rotate(360deg);
    }
}

/* Bounce animation */
@keyframes bounce {
    0%, 20%, 50%, 80%, 100% {
        transform: translateY(0);
    }
    40% {
        transform: translateY(-10px);
    }
    60% {
        transform: translateY(-5px);
    }
}

/* Animated elements */
.animate-fade-in {
    animation: fadeIn 0.5s ease forwards;
}

.animate-fade-in-up {
    animation: fadeInUp 0.5s ease forwards;
}

.animate-fade-in-down {
    animation: fadeInDown 0.5s ease forwards;
}

.animate-fade-in-left {
    animation: fadeInLeft 0.5s ease forwards;
}

.animate-fade-in-right {
    animation: fadeInRight 0.5s ease forwards;
}

.animate-scale-in {
    animation: scaleIn 0.5s ease forwards;
}

.animate-coin-flip {
    animation: coinFlip 1s ease-in-out;
}

.animate-pulse {
    animation: pulse 1.5s ease infinite;
}

.animate-glow {
    animation: glow 1.5s infinite;
}

.animate-shake {
    animation: shake 0.5s;
}

.animate-rotate {
    animation: rotate 1.5s linear infinite;
}

.animate-bounce {
    animation: bounce 1.5s infinite;
}

/* Animation delays */
.delay-100 {
    animation-delay: 100ms;
}

.delay-200 {
    animation-delay: 200ms;
}

.delay-300 {
    animation-delay: 300ms;
}

.delay-400 {
    animation-delay: 400ms;
}

.delay-500 {
    animation-delay: 500ms;
}

/* Item-specific animations */
.inventory-item:hover {
    animation: pulse 1s ease;
}

.coin-icon {
    animation: coinFlip 2s ease-in-out infinite;
}

.new-item-badge {
    animation: pulse 1.5s ease infinite;
}

.transaction-success {
    animation: glow 1.5s;
}

.transaction-fail {
    animation: shake 0.5s;
}

/* Card animations */
.card {
    transition: transform 0.3s ease, box-shadow 0.3s ease;
}

.card:hover {
    transform: translateY(-5px);
    box-shadow: 0 6px 15px rgba(0, 0, 0, 0.1);
}

/* Button animations */
.btn {
    transition: transform 0.2s ease, background-color 0.2s ease;
}

.btn:hover {
    transform: translateY(-2px);
}

.btn:active {
    transform: translateY(1px);
}

/* Navigation animations */
.nav-link {
    position: relative;
    transition: color 0.3s ease;
}

.nav-link::after {
    content: '';
    position: absolute;
    bottom: -2px;
    left: 0;
    width: 0;
    height: 2px;
    background-color: currentColor;
    transition: width 0.3s ease;
}

.nav-link:hover::after {
    width: 100%;
}

/* Tooltip animations */
.tooltip {
    position: relative;
    display: inline-block;
}

.tooltip .tooltip-text {
    visibility: hidden;
    width: 120px;
    background-color: rgba(0, 0, 0, 0.8);
    color: #fff;
    text-align: center;
    padding: 5px;
    border-radius: 6px;
    position: absolute;
    z-index: 1;
    bottom: 125%;
    left: 50%;
    transform: translateX(-50%);
    opacity: 0;
    transition: opacity 0.3s ease, transform 0.3s ease;
}

.tooltip:hover .tooltip-text {
    visibility: visible;
    opacity: 1;
    transform: translateX(-50%) translateY(-5px);
}

/* Loading animation */
.loading-spinner {
    width: 30px;
    height: 30px;
    border: 4px solid rgba(0, 0, 0, 0.1);
    border-top: 4px solid #7289DA;
    border-radius: 50%;
    animation: rotate 1s linear infinite;
}

/* Custom animations for economy events */
.economy-event {
    transition: all 0.3s ease;
}

.economy-event.positive:hover {
    box-shadow: 0 5px 15px rgba(76, 175, 80, 0.3);
}

.economy-event.negative:hover {
    box-shadow: 0 5px 15px rgba(244, 67, 54, 0.3);
}

.economy-event.neutral:hover {
    box-shadow: 0 5px 15px rgba(33, 150, 243, 0.3);
}

/* Shop item animations */
.shop-item {
    transition: transform 0.3s ease, box-shadow 0.3s ease;
}

.shop-item:hover {
    transform: translateY(-5px) scale(1.02);
    box-shadow: 0 8px 20px rgba(0, 0, 0, 0.15);
}

/* Progress bar animation */
.progress-bar-animated .progress-fill {
    animation: progress-animation 2s linear;
}

@keyframes progress-animation {
    from {
        width: 0%;
    }
}

/* Stats counter animation */
.stats-counter {
    counter-reset: stat-counter 0;
    animation: count-up 2s ease-out forwards;
}

@keyframes count-up {
    from {
        counter-increment: stat-counter 0;
    }
    to {
        counter-increment: stat-counter var(--target-value);
    }
}

.stats-counter::after {
    content: counter(stat-counter);
}